/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.openapi.api;

import org.example.openapi.model.Error;
import org.example.openapi.model.PetitionRequest;
import org.example.openapi.model.PetitionResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-03T02:53:03.860059+02:00[Europe/Kiev]")
@Validated
@Api(value = "petitions", description = "the petitions API")
public interface PetitionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /petitions/{id}/vote : Vote for the petition
     *
     * @param id The id of the petition to retrieve (required)
     * @return accepted (status code 202)
     *         or not found error (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "Vote for the petition", nickname = "addVote", notes = "", response = PetitionResponse.class, tags={ "Petition operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "accepted", response = PetitionResponse.class),
        @ApiResponse(code = 404, message = "not found error", response = Error.class),
        @ApiResponse(code = 500, message = "internal server error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/petitions/{id}/vote",
        produces = { "application/json" }
    )
    default ResponseEntity<PetitionResponse> addVote(@ApiParam(value = "The id of the petition to retrieve", required = true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"votes\" : 0, \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /petitions : Create a petition
     *
     * @param petitionRequest Name and description for the petition (required)
     * @return A paged array of petition (status code 201)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Create a petition", nickname = "createPetition", notes = "", response = PetitionResponse.class, tags={ "Petition operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "A paged array of petition", response = PetitionResponse.class),
        @ApiResponse(code = 500, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/petitions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PetitionResponse> createPetition(@ApiParam(value = "Name and description for the petition", required = true) @Valid @RequestBody PetitionRequest petitionRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"votes\" : 0, \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /petitions/{id} : Delete petition By Id
     *
     * @param id The id of the petition to retrieve (required)
     * @return no content (status code 204)
     *         or unexpected error (status code 404)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Delete petition By Id", nickname = "deletePetitionById", notes = "", tags={ "Petition operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "no content"),
        @ApiResponse(code = 404, message = "unexpected error", response = Error.class),
        @ApiResponse(code = 500, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/petitions/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deletePetitionById(@ApiParam(value = "The id of the petition to retrieve", required = true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /petitions/{id} : Info for a specific petition
     *
     * @param id The id of the petition to retrieve (required)
     * @return Petition (status code 200)
     *         or not found error (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "Info for a specific petition", nickname = "getPetitionById", notes = "", response = PetitionResponse.class, tags={ "Petition operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Petition", response = PetitionResponse.class),
        @ApiResponse(code = 404, message = "not found error", response = Error.class),
        @ApiResponse(code = 500, message = "internal server error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/petitions/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<PetitionResponse> getPetitionById(@ApiParam(value = "The id of the petition to retrieve", required = true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"votes\" : 0, \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /petitions : List all petition
     *
     * @param limit How many items to return at one time (optional)
     * @param nextPageMarker Number of the page (optional)
     * @param filter Fields for filtering Example: /petitions?filter&#x3D;(eq, name, testName)&amp;(cont, description, testDesc) First parameter is filter type and can be: eq for equal or cont for contains. Second parameter is petition field name. Valid values: name, description Third parameter is value to compare  (optional)
     * @return A paged array of petition (status code 200)
     *         or bad request error (status code 400)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "List all petition", nickname = "listPetition", notes = "", response = PetitionResponse.class, responseContainer = "List", tags={ "Petition operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A paged array of petition", response = PetitionResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad request error", response = Error.class),
        @ApiResponse(code = 500, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/petitions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<PetitionResponse>> listPetition(@ApiParam(value = "How many items to return at one time") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "Number of the page") @Valid @RequestParam(value = "next_page_marker", required = false) Integer nextPageMarker,@ApiParam(value = "Fields for filtering Example: /petitions?filter=(eq, name, testName)&(cont, description, testDesc) First parameter is filter type and can be: eq for equal or cont for contains. Second parameter is petition field name. Valid values: name, description Third parameter is value to compare ") @Valid @RequestParam(value = "filter", required = false) String filter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"votes\" : 0, \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /petitions/{id} : Update petition by Id
     *
     * @param id The id of the petition to retrieve (required)
     * @param petitionRequest Name and description for the petition (required)
     * @return Updated petition (status code 201)
     *         or not found error (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "Update petition by Id", nickname = "updatePetitionById", notes = "", response = PetitionResponse.class, tags={ "Petition operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Updated petition", response = PetitionResponse.class),
        @ApiResponse(code = 404, message = "not found error", response = Error.class),
        @ApiResponse(code = 500, message = "internal server error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/petitions/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PetitionResponse> updatePetitionById(@ApiParam(value = "The id of the petition to retrieve", required = true) @PathVariable("id") Long id,@ApiParam(value = "Name and description for the petition", required = true) @Valid @RequestBody PetitionRequest petitionRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"votes\" : 0, \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
