/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.openapi.api;

import org.example.openapi.model.Error;
import org.example.openapi.model.UserCreateRequest;
import org.example.openapi.model.UserCreateResponse;
import org.example.openapi.model.UserLoginResponse;
import org.example.openapi.model.UserLogoutResponse;
import org.example.openapi.model.UserResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-03T02:53:03.860059+02:00[Europe/Kiev]")
@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users/{id} : Info for a specific user
     *
     * @param id The id of the user to find (required)
     * @return User (status code 200)
     *         or not found error (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "Info for a specific user", nickname = "getUserById", notes = "", response = UserResponse.class, tags={ "User operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User", response = UserResponse.class),
        @ApiResponse(code = 404, message = "not found error", response = Error.class),
        @ApiResponse(code = 500, message = "internal server error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserResponse> getUserById(@ApiParam(value = "The id of the user to find", required = true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"votes\" : [ \"\", \"\" ], \"userId\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : List all users with their vote counts
     *
     * @return List of users with vote counts (status code 200)
     *         or Unexpected error (status code 500)
     */
    @ApiOperation(value = "List all users with their vote counts", nickname = "listUsers", notes = "", response = UserResponse.class, responseContainer = "List", tags={ "User operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of users with vote counts", response = UserResponse.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserResponse>> listUsers() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"votes\" : [ \"\", \"\" ], \"userId\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/login/{id} : Log in
     *
     * @param id The id of the user to log in (required)
     * @return Successful login (status code 200)
     *         or Login failure (status code 401)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "Log in", nickname = "loginUser", notes = "", response = UserLoginResponse.class, tags={ "User operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful login", response = UserLoginResponse.class),
        @ApiResponse(code = 401, message = "Login failure", response = Error.class),
        @ApiResponse(code = 500, message = "internal server error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/login/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserLoginResponse> loginUser(@ApiParam(value = "The id of the user to log in", required = true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/logout : Log out from account
     *
     * @return Successful login (status code 200)
     *         or Login failure (status code 401)
     */
    @ApiOperation(value = "Log out from account", nickname = "logoutUser", notes = "", response = UserLogoutResponse.class, tags={ "User operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful login", response = UserLogoutResponse.class),
        @ApiResponse(code = 401, message = "Login failure", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/logout",
        produces = { "application/json" }
    )
    default ResponseEntity<UserLogoutResponse> logoutUser() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : Create a user
     *
     * @param userCreateRequest Id for a new User (required)
     * @return User created (status code 201)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Create a user", nickname = "userCreate", notes = "", response = UserCreateResponse.class, tags={ "User operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User created", response = UserCreateResponse.class),
        @ApiResponse(code = 500, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserCreateResponse> userCreate(@ApiParam(value = "Id for a new User", required = true) @Valid @RequestBody UserCreateRequest userCreateRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
